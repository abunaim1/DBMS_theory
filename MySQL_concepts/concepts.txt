Query:
-> something finding from a database
-> 5 Types of Query:
1. select Query - Roll(102) ->Student-> Naim
2. parameter Query - Roll-102
3. crosstab Query - take information like summery or group from a database
4. unmatched Query - not match type data. 
5. action Query - delete, update, something like action.

Types of action Query:
1. make table 
2. append
3. update
4. delete 
-------------------------------------------------------------------------------------
Types of Query Language:
1. QUEL - Query Language
2. QBE - Query By Example
3. SQL - Structured Query Language

SQL - Structured Query Language
Types of SQL:
1. DML - data manupulation (important)
2. DDL - data defination (important)
3. DCL - data control
4. DTL - data transiction

DML: (operation with Data Manupulation Language):
Select - taking data from table and showing it 
Insert - data Insert 
Update - data update 
Delete - data delete

DDL: (operation with Data Defination Language):
Create - creating a table
Append - full new column added  
Drop - full table delete
-------------------------------------------------------------------------------------
SQL vs MySQL

SQL - Structured Query Language, this is a Language as like others programming Language(c, c++, python)
MySQL - It is a database, A Relational database--> Where we use SQL Query.

-------------------------------------------------------------------------------------
Data type of MySQL: https://www.w3schools.com/mysql/mysql_datatypes.asp
1. Numaric - INT, FLOAT, DOUBLE, DECIMAL
2. String - CHAR(4) - 'abcd' and VARCHAR(5) - 'a', 'ab', 'abc', 'abcd', 'abcde'
3. Date Time - DATE, TIME, DATETIME
4. Boolean - BOOL, BOOLEAN
5. Binary - BINARY(10000) Binary data (file save) 
6. Set - SET()
7. BIT type - BIT(5) - 00001
8. BLOB
9. TEXT
-------------------------------------------------------------------------------------
Some operation of database: Create, Insert, Update, Delete, Drop.

Create - creating table
Insert - entry data into an existing table
Update - changing data of an existing table
Delete - delete data from a existing table
Drop - delete a table complately 
-------------------------------------------------------------------------------------
Constrains: - Rules (নিয়ম)
PRIMARY KEY
FOREIGN KEY
UNIQUE
CHECK
DEAFULT
NOT NULL
-------------------------------------------------------------------------------------
SLECT - 
FROM - 
WHERE - 
-------------------------------------------------------------------------------------
Arithmetic Operator
Comparisn Operator
Logical Operator

DISTINCT - আলাদা 

SELECT DISTINCT designation 
from employee

Syntax Sequnece:
SELECT
FROM
WHERE
ORDER BY - asscending, descending
LIMIT - 
OFFSET 

SELECT Name
FROM employee
ORDER By age ASC;

SELECT Name
FROM employee
ORDER By age DESC;

SELECT ---
FROM -- 
WHERE --
LIMIT 10
OFFSET 59

or,

SELECT ---
FROM -- 
WHERE --
LIMIT 59, 10

IN, NOT IN, LIKE, AS

IN:
WHERE Roll IN (102, 103, 104)

NOT IN
WHERE Roll NOT IN (102, 103, 104)

LIKE:
WHERE Name LIKE 'Rahim %'

AS: 
SELECT Name AS t
SELECT FIRST_NAME AS NAME, SALARY AS 'CURRENT SALARY', SALARY+1000 AS INREASED_SALARY
FROM EMPLOYEES;
----------------------------------------------------------------------------------------

Functions:
UPPER -> UPPER('abc') 
SELECT UPPER(FIRST_NAME)
FROM EMPLOYEES;

LOWER -> LOWER('AbC')
ABS -> ABS(-2) = 2

DEGREES (3) = degree function takes radian value
RADIANS (90) = radian function takes degree value

COS (RADIANS(90)) = 0
trigonometery function always take radian value.
ACOS = this is cos inverse
SIN
ASIN
TAN
ATAN
MySQL system works with radian system. 

CEIL -> CEIL(2.5) = 3
FLOOR -> FLOOR(2.5) = 2
DIV -> (divition) 10 DIV 2 = 5
EXP = using for exponential values

GREATEST(2,4,9,1) = 9
LEAST (3,1,0,4) = 0

LN = logarithm e base
LOG = logarithm
LOG10 = logarithm 10 base
LOG2 = logarithm 2 base

MOD = 5%2 = 1 (ভাগশেষ)
PI() = 3.1416
POW (2,5) = 2 to the power 5
RAND() = 0-1 ---> SELECT RAND()
ROUND(12.656, 2) = 12.66 ---> SELECT ROUND(12.656, 2)
ROUND(12.633, 2) = 12.63
SQRT = square root
TRUNCATE(12.567) = 12.56
------------------------------------------------------------------------------------------------------

Group Functions:
MAX, MIN, COUNT, SUM, AVG
Group By -> Group according to something : 

maximum salary for every group:
SELECT DEPARTMENT_ID, MAX(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID 

counting row:
SELECT DEPARTMENT_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

HAVING - applied condition on group group function.

SELECT DEPARTMENT_ID, MAX(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) > 1000

OR,

SELECT DEPARTMENT_ID, MAX(SALARY) AS sal
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING sal > 1000

ALTER TABLE Query: this is use for changing the structural change of a table.  
UPDATE, DELETE কাজ করে টেবিল এর ডাটা গুলোর উপর;
ALTER, DROP কাজ করে টেবিল এর স্ট্রাকচার এর উপর;

for add column:
ALTER TABLE EMPLOYEES
ADD COLUMN EMAIL VARCHAR(50);

for remove a column:
ALTER TABLE EMPLOYEES
DROP COLUMN SALARY;

for edit datatype or datatype size:
ALTER TABLE EMPLOYEES
MODIFY COLUMN SALARY INT (10)

Subquery: 
SOME Example OF BASIC Subquery,
-------------------------------
-- SHOW ALL DETAILS who got less salary from employee_id 144
SELECT *
FROM EMPLOYEES
WHERE SALARY < (SELECT SALARY
		FROM EMPLOYEES
		WHERE EMPLOYEE_ID = 144);
--------------------------------------------------------------
-- who got highest ?
SELECT *
FROM EMPLOYEES
WHERE SALARY = (SELECT MAX(SALARY)
				FROM EMPLOYEES);
--------------------------------------------------------------
-- WHO WORKS IN MARKETING DEPARTMENT?
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
						FROM DEPARTMENTS
						WHERE DEPARTMENT_NAME = 'MARKETING'
					  );
--------------------------------------------------------------
-- WHO WORKS IN MARKETING DP THEIR AVG. SALARY?
SELECT COUNT(*) AS MEMBERS
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID
						FROM DEPARTMENTS
						WHERE DEPARTMENT_NAME = 'IT'
					  );
--------------------------------------------------------------
-- TOTAL SALARY FOR PROGRAMMER IN OFFICE?
SELECT SUM(SALARY)
FROM EMPLOYEES
WHERE JOB_ID = (SELECT JOB_ID
				FROM JOBS
                WHERE JOB_TITLE = 'Programmer');
--------------------------------------------------------------
ADVANCE Subquery:
SOME Example OF ADVANCE Subquery,

-- who get the second highst salary and how much?
SELECT *
FROM EMPLOYEES
WHERE SALARY = (SELECT MAX(SALARY)
				FROM EMPLOYEES
				WHERE SALARY < (SELECT MAX(SALARY)
								FROM EMPLOYEES
								)                                
				);
--------------------------------------------------------------
-- who get the salary more than manager and how much?
SELECT *
FROM EMPLOYEES AS EMP
WHERE SALARY > (
				SELECT SALARY
				FROM EMPLOYEES AS MNG
                WHERE EMP.MANAGER_ID = MNG.EMPLOYEE_ID
                );
--------------------------------------------------------------
-- which people has same job_id as like manager job_id
SELECT *
FROM EMPLOYEES AS EMP
WHERE JOB_ID =  (
				SELECT JOB_ID
				FROM EMPLOYEES AS MNG
                WHERE EMP.MANAGER_ID = MNG.EMPLOYEE_ID
                );
--------------------------------------------------------------         
Common Table Expression: CTE ->
(WITH, AS)

WITH TEMP AS 
(
    SELECT *
    FROM EMPLOYEES
    LIMIT 5
)    
SELECT *
FROM TEMP
-----------------------------------------------------------------
WITH AVGIT AS
(
	SELECT AVG(SALARY) AS SL1
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = 60 -- IT
),
MAXMKT AS
(
	SELECT MAX(SALARY) AS SL2
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = 20 -- MARKETING
)

SELECT *
FROM EMPLOYEES
WHERE SALARY > (SELECT SL1 FROM AVGIT) AND SALARY < (SELECT SL2 FROM MAXMKT)
-----------------------------------------------------------------------------
Practice problem 1:
------------------
-- Determine the third highest salary and which employee receives it?

-- 3rd highest salary
SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE SALARY < (
				SELECT MAX(SALARY)
				FROM EMPLOYEES
				WHERE SALARY < (
								SELECT MAX(SALARY)
								FROM EMPLOYEES
							   )
				);

-- who got it
SELECT *
FROM EMPLOYEES
WHERE SALARY = (SELECT MAX(SALARY)
				FROM EMPLOYEES
				WHERE SALARY < (
								SELECT MAX(SALARY)
								FROM EMPLOYEES
								WHERE SALARY < (
												SELECT MAX(SALARY)
												FROM EMPLOYEES
											   )
								)
				);
-----------------------------------------------------------------------------
-- Determine the third lowest salary and which employee receives it?

-- 3rd lowest --
SELECT MIN(SALARY)
FROM EMPLOYEES
WHERE SALARY > (
				(
					SELECT MIN(SALARY)
					FROM EMPLOYEES
					WHERE SALARY > (
									SELECT MIN(SALARY)
									FROM EMPLOYEES
								   )
				)
			   );
-- who got --
SELECT *
FROM EMPLOYEES
WHERE SALARY = (
				SELECT MIN(SALARY)
				FROM EMPLOYEES
				WHERE SALARY > (
								(SELECT MIN(SALARY)
									FROM EMPLOYEES
									WHERE SALARY > (SELECT MIN(SALARY)
													FROM EMPLOYEES)
                                                    )
							  )
				);
---------------------------------------------------------------------------------------------------
-- With common table expression solve the question 1

WITH MAX3 AS(
            SELECT MAX(SALARY) AS MAX1
			FROM EMPLOYEES
			WHERE SALARY < (
							SELECT MAX(SALARY)
							FROM EMPLOYEES
						   )
            )
SELECT MAX(SALARY)
FROM EMPLOYEES
WHERE SALARY < (
				SELECT MAX1 FROM MAX3
			    );
-- who got it --
WITH MAXP AS(
                (SELECT MAX(SALARY) AS PMX1
                FROM EMPLOYEES
                WHERE SALARY < (
                                SELECT MAX(SALARY)
                                FROM EMPLOYEES
                                WHERE SALARY < (
                                                SELECT MAX(SALARY)
                                                FROM EMPLOYEES
                                                )
                                )
                )
            )
SELECT *
FROM EMPLOYEES
WHERE SALARY = (SELECT PMX1 FROM MAXP);----------------------------------------------------------------------------------------------------       
-- Which employee has been hired after Steven?
SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE HIRE_DATE = (
					SELECT MIN(HIRE_DATE)
					FROM EMPLOYEES
					WHERE HIRE_DATE>(
										SELECT MIN(HIRE_DATE)
										FROM EMPLOYEES
										WHERE FIRST_NAME = 'STEVEN'
									)
				  );
---------------------------------------------------------------------------------------------------- 
Joining Table:
--------------
Without JOIN Syntax:
--------------------
SELECT EMPLOYEES.FIRST_NAME, DEPARTMENTS.DEPARTMENT_NAME
FROM DEPARTMENTS, EMPLOYEES
WHERE EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID

with JOIN Syntax:
----------------
SELECT EMPLOYEES.FIRST_NAME, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
	JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;

OR,

SELECT EMPLOYEES.FIRST_NAME, DEPARTMENTS.DEPARTMENT_NAME
FROM EMPLOYEES
	JOIN DEPARTMENTS USING(DEPARTMENT_ID);
----------------------------------------------------------------------------------------------------
INNER JOIN: the common elemect from both table.
LEFT JOIN: common things + uncommon things in the left table 
RIGHT JOIN: common things + uncommon things in the right table
CROSS JOIN: both table common or uncommon

SELF JOIN:
---------
-- employee with their manager name:
SELECT m.FIRST_NAME, e.FIRST_NAME
FROM EMPLOYEES AS e
				JOIN EMPLOYEES AS m
                ON e.EMPLOYEE_ID = m.MANAGER_ID;

-- SHOW THOSE DEPARTMENT_NAME THOS DEPARTMENT HAS NO EMPLOYEES
SELECT DEPARTMENTS.DEPARTMENT_NAME
FROM DEPARTMENTS
	LEFT JOIN EMPLOYEES
    ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
WHERE EMPLOYEES.DEPARTMENT_ID IS NULL

-- SHOW A EMPLOYE FIRST NAME WITH THE SALARY AND HOW MUCH LESS SALARY GET COMPARED TO HIS DEPARTMENT'S AVG SALARY 
SELECT EMPLOYEES.FIRST_NAME,
		EMPLOYEES.SALARY,
        ((SELECT AVG(SALARY) FROM EMPLOYEES WHERE department_id = EMPLOYEES.department_id) - EMPLOYEES.SALARY) AS LAVG
FROM EMPLOYEES
	JOIN DEPARTMENTS
    ON EMPLOYEES.department_id = DEPARTMENTS.department_id

Foreign Key ON DELETE Operation:
-------------------------------
ON DELETE CASCADE (If i delete a data from table this line will help to delete it from its Foreign column)
or
ON DELETE SET NULL (If i delete a data from table this line will help to delete it from its Foreign column and set NULL)

FOREIGN KEY(ROLL) REFERENCES student (ROLL)
ON DELETE CASCADE

or

FOREIGN KEY(ROLL) REFERENCES student (Roll)
DELETE ON SET NULL

Set Operation:
-------------
4 types:
A = {1,3,4,5,3,1,7}
B = {2,1,3,2,9}
UNION: A UNION B : {1,3,4,5,7,2,9}
UNION ALL: A UNION ALL B : {1,3,4,5,3,1,7,2,1,3,2,9}
INTERSECTION: A INTERSECTION B: {1,3}
MINUS: A MINUS B: {4,5,7}

SELECT *
FROM EMPLOYEES
WHERE SALARY > 10000
UNION 
SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100

(SELECT *
FROM EMPLOYEES
WHERE SALARY > 10000) 
INTERSECT 
(SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100)
----------------------------------------------------------------------------------------------
Dtabase design strategies:
-------------------------
1. Top down: Model -> Data (Not existing system)
2. Bottom Up: Data -> Model (existing already) 

Requirement Analysis: for designing a database firsly need to analyse the requirement. 

What to avoid:
1. Redundancy
2. Incompleteness

How to Model a database:
------------------------
ER diagram -> Entity Relationship diagram (ERD)
Entity means table of database. Student table is Entity.

ERD notation: picture 

Weak Entity and Strong Entity: Weak Entity has no solid existance but Strong has. For example Student and exam, Without student exam has no value so exam is a Weak Entity but Without exam student has own existance so student is a Strong Entity.

ERD attributes:
---------------
1. composite, example: name -> first_name + last_name, address -> present_add + parmanent_add
2. multivalued, example: a student has 'more than one' phone number.-> {phone}
3. derived, example: 'age' derived from date of birth.-> age()

ERD Genaralization and Specialization:
-------------------------------------
School -> Student, Teacher, Staff
(Student+Teacher+Staff) -> Person (Genaralization)
(Teacher+Staff) -> Employee (Genaralization)

Person -> Student, Teacher, Staff (Specialization)
Employee -> Teacher, Staff (Specialization)

so, Specialization is the opposite of Genaralization.

Example:pictures


Future to do.
-------------
Query Practice (leetcode)
ERD Practice
Procedure, function, trigger
MySQL - website





























